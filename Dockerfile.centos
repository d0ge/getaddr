FROM centos:7

# change here the versions
ENV GOLANG_VERSION 1.15.3
ENV GLIDE_VERSION 0.13.3

ENV GOPATH /go

# find URL and SHA1 on https://golang.org/dl/
ENV GOLANG_DOWNLOAD_URL https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz
ENV GOLANG_DOWNLOAD_SHA256 010a88df924a81ec21b293b5da8f9b11c176d27c0ee3962dc1738d2352d3c02d

ENV GLIDE_DOWNLOAD_URL https://github.com/Masterminds/glide/releases/download/v$GLIDE_VERSION/glide-v$GLIDE_VERSION-linux-amd64.tar.gz

# install general pre-requisites
RUN yum install -y epel-release
RUN yum install -y tar git git-core sqlite sqlite-devel make gcc gcc-c++ patch ruby-devel zlib zlib-devel postgresql-devel \
  cmake openssh-client libxml2-devel libxslt-devel nodejs npm curl rpm-build readline readline-devel \
  libyaml-devel libffi-devel openssl-devel bzip2 autoconf automake libtool bison wget rubygems redis

# install rbenv
RUN git clone git://github.com/sstephenson/rbenv.git /root/.rbenv
RUN echo 'export PATH="/root/.rbenv/bin:$PATH"' >> /root/.bash_profile

RUN echo 'eval "$(rbenv init -)"' >> /root/.bash_profile
RUN echo 'eval "$(rbenv init -)"' >> /etc/profile.d/rbenv.sh

RUN git clone git://github.com/sstephenson/ruby-build.git /root/.rbenv/plugins/ruby-build
RUN echo 'export PATH="/root/.rbenv/plugins/ruby-build/bin:$PATH"' >> /root/.bash_profile

ENV PATH /root/.rbenv/bin:$PATH
RUN exec $SHELL

# install go
RUN curl -fsSL "$GOLANG_DOWNLOAD_URL" -o golang.tar.gz \
  && echo "$GOLANG_DOWNLOAD_SHA256  golang.tar.gz" | sha256sum -c - \
  && tar -C /usr/local -xzf golang.tar.gz \
  && rm golang.tar.gz

ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

# prepare go-env
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" "$GOPATH/pkg" && chmod -R 777 "$GOPATH"

# install godep
RUN go get github.com/tools/godep

# install glide
ENV GLIDE_DOWNLOAD_URL https://github.com/Masterminds/glide/releases/download/0.10.2/glide-0.10.2-linux-amd64.tar.gz
ENV GLIDE_DOWNLOAD_SHA256 0eedb7f47ff4d184ab334f8dd8be843f8e98774b6ccd92cbe71a6e6c7a3d5da8

RUN \
  curl -fsSL $GLIDE_DOWNLOAD_URL  -o glide-inux-amd64.tar.gz && \
  tar xvf glide-inux-amd64.tar.gz && \
  mv linux-amd64/glide /usr/bin/ && \
  rm glide-inux-amd64.tar.gz && \
  rm -Rf linux-amd64

# Move to working directory /build
WORKDIR /build

# Copy and download dependency using go mod
COPY go.mod .
COPY go.sum .
RUN go mod download

# Copy the code into the container
COPY . .

# Build the application
RUN go build -tags netcgo -o main .

# Move to /dist directory as the place for resulting binary folder
WORKDIR /dist

# Copy binary from build to main folder
RUN cp /build/main .

# Command to run when starting the container
CMD ["/dist/main"]